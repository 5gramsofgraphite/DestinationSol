apply from: '../config/gradle/common.gradle'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

import org.reflections.Reflections
import org.reflections.scanners.ResourcesScanner
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.serializers.JsonSerializer

// Dependencies needed for what our Gradle scripts themselves use. It cannot be included via an external Gradle file :-(
buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
    }

    dependencies {
        // Needed for caching reflected data during builds
        classpath 'org.reflections:reflections:0.9.10'
        classpath 'dom4j:dom4j:1.6.1'
        classpath 'com.google.code.gson:gson:2.8.5'
    }
}

dependencies {
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"

    compile(group: 'org.terasology.gestalt', name: 'gestalt-asset-core', version: '7.0.4-SNAPSHOT')
    compile(group: 'org.terasology.gestalt', name: 'gestalt-entity-system', version: '7.0.4-SNAPSHOT')
    compile(group: 'org.terasology.gestalt', name: 'gestalt-module', version: '7.0.4-SNAPSHOT')
    compile(group: 'org.terasology.gestalt', name: 'gestalt-util', version: '7.0.4-SNAPSHOT')


    compile "com.github.everit-org.json-schema:org.everit.json.schema:1.11.1"
    compile "com.github.marschall:zipfilesystem-standalone:1.0.1"
    compile 'dom4j:dom4j:1.6.1'

    //TODO inserted by someone who has no idea how the gradle thing works. Inspect whether necessary (for tests). Copied rom desktop build.gradle. May break things with android (maybe)
    testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testCompile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    testCompile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    testCompile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
    testCompile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"

    // Test lib dependencies
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
    testCompile group: 'org.jboss.shrinkwrap', name: 'shrinkwrap-depchain-java7', version: '1.1.3'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
}

compileJava.doLast {
    // https://github.com/MovingBlocks/gestalt/blob/a46bbaf52d2df39c57e31e58430612b70b8e2255/testpack/moduleA/build.gradle
    def resourcesPath = sourceSets.find { it.name == 'main' }.resources.srcDirs
    def classPath = files { compileJava.destinationDir }
    URL[] scanUrls = classPath.collect { it.toURI().toURL() } + resourcesPath.collect {
        it.toURI().toURL()
    }
    URL[] classLoaderUrls = scanUrls + compileJava.classpath.collect { it.toURI().toURL() }

    ClassLoader classLoader = new URLClassLoader(classLoaderUrls, getClass().getClassLoader())
    org.reflections.Configuration config = new org.reflections.util.ConfigurationBuilder()
    config.addClassLoader(classLoader)
    config.setUrls(scanUrls)

    config.addScanners(new ResourcesScanner(), new SubTypesScanner(false), new TypeAnnotationsScanner().filterResultsBy())
    Reflections reflections = new Reflections(config)
    JsonSerializer serializer = new JsonSerializer()
    def outPath = compileJava.destinationDir.toString() + "/manifest.json"
    serializer.save(reflections, outPath)
}

eclipse.project {
    name = appName + "-engine"
}

// Extra details provided for unit tests
test {
    // ignoreFailures: Specifies whether the build should break when the verifications performed by this task fail.
    ignoreFailures = true

    // showStandardStreams: makes the standard streams (err and out) visible at console when running tests
    testLogging.showStandardStreams = true
}
